import json
import argparse

from utils.misc import load_obj, save_obj

#  bbox_file = '/home/jerpint/digit-detection/code/digit_detector/results/inference/avenue_test_set/bbox.json'
#  instances_test_file = '/home/jerpint/digit-detection/code/digit_detector/data/Avenue/Humanware_v1_1553272293/test_sample/instances_test_sample.json'
#
#  sample_pickle_file = '/home/jerpint/digit-detection/code/digit_detector/data/avenue_test_metadata_split.pkl'
#  out_metadata_file = '/home/jerpint/digit-detection/code/temp/ave_test_metadata_split.pkl'



def make_test_metadata_file(bbox_file, instances_test_file, out_metadata_file):

    '''

    bbox_file: file generated by the output of tools/test_net.py of maskrcnn

    instances_test_file: file provided by instructors containing test images

    out_metadata_file: path to where the metadata file should be saved

    '''

    with open(bbox_file) as f:
        bbox = json.load(f)

    with open(instances_test_file) as f:
        instances_test = json.load(f)

    metadata_test = {}

    for idx in range(len(instances_test['images'])):

        # Initialize index
        metadata_test[idx] = {}

        metadata_test[idx]['filename'] = instances_test['images'][idx]['file_name']
        metadata_test[idx]['id'] = instances_test['images'][idx]['id']
        metadata_test[idx]['split'] = 'test'

        metadata_test[idx]['metadata'] = {}

    for item in bbox:

        idx = item['image_id']

        # Add only the bbox once
        if not metadata_test[idx]['metadata'] and item['image_id'] == metadata_test[idx]['id']:

            temp_bbox = item['bbox']

            x = item['bbox'][0]
            y = item['bbox'][1]
            w = item['bbox'][2]
            h = item['bbox'][3]

            metadata_test[idx]['metadata'] = {

                'left':  [x],
                'top': [y],
                'width': [w],
                'height': [h],
                'label': [-1]


            }

        #  else:
        #      print("Skipped index: ", idx)

        if idx >= len(metadata_test)-1:
            break


    print("Metadata file saved to: ", out_metadata_file)
    save_obj(metadata_test, out_metadata_file)


# Utility, ignore this function
def make_sample_test_set():
    with open(json_file) as f:
        metadata = json.load(f)


    sample = {}

    sample = metadata.copy()

    keys = ['images', 'annotations']

    for key in keys:
        sample[key] = metadata[key][0:100]


    #  with open(json_outfile, 'w') as outfile:
    #      json.dump(sample, outfile)


if __name__ == "__main__":


    parser = argparse.ArgumentParser()

    parser.add_argument("--bbox_file", type=str, default='')

    parser.add_argument("--instances_test_file", type=str, default='')

    parser.add_argument("--out_metadata_file", type=str, default='')

    args = parser.parse_args()
    bbox_file = args.bbox_file
    out_metadata_file = args.out_metadata_file
    instances_test_file = args.instances_test_file

    make_test_metadata_file(bbox_file, instances_test_file, out_metadata_file)

